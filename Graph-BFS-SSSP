// BFS correctly calculates shortest path to all the nodes from src (unweighted / weight = 1)

const buildGraph = (n: number, edges: number[][]) => {
    let adjList = new Map()
    let distance = new Map()
    let visited = new Map()
    for(let i=1; i <= n; i++) {
        adjList.set(i, [])
        distance.set(i, Infinity)
        visited.set(i, false)
    }
    for(let [u,v] of edges) {
        adjList.get(u).push(v)
        adjList.get(v).push(u) // if un-directed... create bi-directional edges
    }
    return [adjList, distance, visited]
}

const main = (
    n: number, 
    edges: number[][], 
    src: number, 
) => {
    // build a graph, distance and visited - delegate this
    let [adjList, distance, visited] = buildGraph(n, edges)
    console.log(adjList, distance, visited)

    // build Q
    let Q = []
    
    // visited, distance, queue - think of this as coupled logic
    visited.set(src, true)
    distance.set(src, 0) 
    Q.push(src)

    while(Q.length) {
        let currNode = Q.shift()
        for(let adj of adjList.get(currNode)) {
            if(visited.get(adj) === false) { // not visited yet
                // visited, distance, queue - think of this as coupled logic
                visited.set(adj, true) 
                let newDistance = distance.get(currNode) + 1
                distance.set(adj, newDistance)
                Q.push(adj)
            }
        }
    }

    console.log(distance)
    return distance
}   

main(
    11,
    [
        [1,2],
        [2,3],
        [2,6],
        [3,4],
        [4,5],
        [5,6],
        [4,7],
        [7,8],
        [8,9],
        [8,10],
        [9,10],
        [9,11],
    ],
    1
)
